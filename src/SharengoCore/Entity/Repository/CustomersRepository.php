<?php

namespace SharengoCore\Entity\Repository;

use SharengoCore\Entity\Customers;

/**
 * CustomersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomersRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByCI($field, $value)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT c FROM \SharengoCore\Entity\Customers c WHERE UPPER(c.'.$field.') = UPPER(:value)');
        $query->setParameter('value', $value);

        return $query->getResult();
    }

    public function getUserByEmailPassword($s_username, $s_password)
    {
        $s_query =  'SELECT c ' .
            'FROM \SharengoCore\Entity\Customers c ' .
            'WHERE c.email = :user ' .
            'AND c.password = :password ' .
            'AND c.registrationCompleted = true';

        $I_query = $this->getEntityManager()->createQuery($s_query);
        $I_query->setParameter('user', $s_username);
        $I_query->setParameter('password', $s_password);

        return $I_query->getOneOrNullResult();
    }

    public function getTotalCustomers()
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('SELECT COUNT(c.id) FROM \SharengoCore\Entity\Customers c');
        return $query->getSingleScalarResult();
    }

    public function findListCustomersFilteredLimited($filters, $limit)
    {
        $qb = $this->createQueryBuilder('c');

        $isFirstParam = true;
        foreach ($filters as $key => $value) {

            // retrieve card entity, not just card field
            $processedKey = ($key == 'card') ? 'IDENTITY(c.' . $key . ')' : 'c.' . $key;

            // generate the dql statement for the specific parameter
            $statement = 'LOWER(' . $processedKey . ') LIKE :' . $key . 'Val';

            // set WHERE ... or AND ... based on isFirstParam flag
            if ($isFirstParam) {
                $qb->where($statement);
                $isFirstParam = false;
            } else {
                $qb->andWhere($statement);
            }

            // set the parameter
            $qb->setParameter($key . 'Val', strtolower('%'.$value.'%'));
        }

        $qb->orderBy('c.surname', 'ASC');
        $qb->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function findMaintainersCards()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT IDENTITY(c.card)
        FROM \SharengoCore\Entity\Customers c
        WHERE c.maintainer = :maintainerValue AND c.enabled = :enabledValue';

        $query = $em->createQuery($dql);
        $query->setParameter('maintainerValue', true);
        $query->setParameter('enabledValue', true);

        return $query->getResult();
    }

    public function findByFirstPaymentCompletedNoInvoice()
    {
        $em = $this->getEntityManager();

        $dql = "SELECT c
        FROM \SharengoCore\Entity\Customers c
        WHERE c.firstPaymentCompleted = true
        AND NOT EXISTS
        (SELECT 1 FROM \SharengoCore\Entity\Invoices i
         WHERE i.customer = c
         AND i.type = 'FIRST_PAYMENT'
        )";

        $query = $em->createQuery($dql);
        return $query->getResult();
    }

}
