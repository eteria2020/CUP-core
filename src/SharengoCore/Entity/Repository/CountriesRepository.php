<?php

namespace SharengoCore\Entity\Repository;

/**
 * CountriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CountriesRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllCountries($selectedCountry = null)
    {
        if(is_null($selectedCountry)) {
            $selectedCountry ='Italia';
        }

        $countries = $this->createQueryBuilder('c')
            ->select('c.code, c.name')
            ->orderBy('c.name')
            ->getQuery();

        // Move the element with 'c.name' = $selectedCountry to the first place
        $result = $countries->getResult();
        for ($i=0; $i<count($result); $i++) {
            if ($result[$i]['name'] == $selectedCountry) {
                $resultTmp = array();
                $resultTmp[0] = $result[$i];
                // Add the elements before and after the $i index
                $result = array_merge($resultTmp, array_slice($result, 0, $i, true),
                    array_slice($result, $i+1, count($result)-$i, true));
                break;
            }
        }

        return $result;
    }

    public function getAllPhoneCodeByCountry($selectedCountry = null)
    {
        if(is_null($selectedCountry)) {
            $selectedCountry ='Italia';
        }

        $countries = $this->createQueryBuilder('c')
            ->select('c.phoneCode, c.name, UPPER(c.code) code')
            ->where('c.phoneCode IS NOT NULL')
            ->orderBy('c.name')
            ->getQuery();

        // Move the element with 'c.name' = $selectedCountry to the first place
        $result = $countries->getResult();
        for ($i=0; $i<count($result); $i++) {
            if ($result[$i]['name'] == $selectedCountry) {
                $resultTmp = array();
                $resultTmp[0] = $result[$i];
                // Add the elements before and after the $i index
                $result = array_merge($resultTmp, array_slice($result, 0, $i, true),
                    array_slice($result, $i+1, count($result)-$i, true));
                break;
            }
        }

        return $result;
    }
}
